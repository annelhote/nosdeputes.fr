<?php

/**
 * BaseParlementaireScrutin
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property int                   $scrutin_id                                 Type: integer
 * @property int                   $parlementaire_id                           Type: integer
 * @property string                $parlementaire_groupe_acronyme              Type: string(16)
 * @property string                $position                                   Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT)
 * @property string                $position_groupe                            Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT)
 * @property bool                  $par_delegation                             Type: boolean
 * @property int                   $delegataire_parlementaire_id               Type: integer
 * @property string                $mise_au_point_position                     Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT, NONVOTANTVOLONTAIRE)
 * @property Scrutin               $Scrutin                                    
 * @property Parlementaire         $Parlementaire                              
 *  
 * @method int                     getScrutinId()                              Type: integer
 * @method int                     getParlementaireId()                        Type: integer
 * @method string                  getParlementaireGroupeAcronyme()            Type: string(16)
 * @method string                  getPosition()                               Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT)
 * @method string                  getPositionGroupe()                         Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT)
 * @method bool                    getParDelegation()                          Type: boolean
 * @method int                     getDelegataireParlementaireId()             Type: integer
 * @method string                  getMiseAuPointPosition()                    Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT, NONVOTANTVOLONTAIRE)
 * @method Scrutin                 getScrutin()                                
 * @method Parlementaire           getParlementaire()                          
 *  
 * @method ParlementaireScrutin    setScrutinId(int $val)                      Type: integer
 * @method ParlementaireScrutin    setParlementaireId(int $val)                Type: integer
 * @method ParlementaireScrutin    setParlementaireGroupeAcronyme(string $val) Type: string(16)
 * @method ParlementaireScrutin    setPosition(string $val)                    Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT)
 * @method ParlementaireScrutin    setPositionGroupe(string $val)              Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT)
 * @method ParlementaireScrutin    setParDelegation(bool $val)                 Type: boolean
 * @method ParlementaireScrutin    setDelegataireParlementaireId(int $val)     Type: integer
 * @method ParlementaireScrutin    setMiseAuPointPosition(string $val)         Type: enum, Possible values (POUR, CONTRE, ABSTENTION, NONVOTANT, NONVOTANTVOLONTAIRE)
 * @method ParlementaireScrutin    setScrutin(Scrutin $val)                    
 * @method ParlementaireScrutin    setParlementaire(Parlementaire $val)        
 *  
 * @package    cpc
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseParlementaireScrutin extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('parlementaire_scrutin');
        $this->hasColumn('scrutin_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('parlementaire_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('parlementaire_groupe_acronyme', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             ));
        $this->hasColumn('position', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'pour',
              1 => 'contre',
              2 => 'abstention',
              3 => 'nonVotant',
             ),
             ));
        $this->hasColumn('position_groupe', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'pour',
              1 => 'contre',
              2 => 'abstention',
              3 => 'nonVotant',
             ),
             ));
        $this->hasColumn('par_delegation', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('delegataire_parlementaire_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('mise_au_point_position', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'pour',
              1 => 'contre',
              2 => 'abstention',
              3 => 'nonVotant',
              4 => 'nonVotantVolontaire',
             ),
             ));


        $this->index('uniq_index', array(
             'fields' => 
             array(
              0 => 'scrutin_id',
              1 => 'parlementaire_id',
             ),
             'type' => 'unique',
             ));
        $this->index('index_parlementaire', array(
             'fields' => 
             array(
              0 => 'parlementaire_id',
             ),
             ));
        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Scrutin', array(
             'local' => 'scrutin_id',
             'foreign' => 'id'));

        $this->hasOne('Parlementaire', array(
             'local' => 'parlementaire_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}