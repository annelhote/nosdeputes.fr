#!/bin/bash

#Récupère le fichier de configuration pour notre environnement
. $(echo $0 | sed 's/[^\/]*$//')db.inc

cd $PATH_APP

#LOCK
if test -e /tmp/loadupdate-ns.lock ;
then
	echo Script locké par $(cat /tmp/loadupdate-ns.lock) : /tmp/loadupdate-ns.lock
	exit 1;
fi

echo $$ > /tmp/loadupdate-ns.lock

# Gestion des options
senateurs=1
jo=1
questions=1
total=0
while getopts "thsjqo-:" option
do
  if [ $option = "-" ]; then
    case $OPTARG in
      help) option="h";;
      nosenateurs) option="s";;
      nojo) option="j";;
      noquestions) option="q";;
      oldquestions) option="o";;
      total) option="t";;
    esac
  fi
  case $option in
    s) senateurs=0;;
    j) jo=0;;
    q) if [[ $questions -ne 1 ]]; then
         echo "options noquestions et oldquestions incompatibles"
         exit 1
       fi
       questions=0;;
    o) if [[ $questions -ne 1 ]]; then
         echo "options noquestions et oldquestions incompatibles"
         exit 1
       fi
       questions=2;;
    t) total=-1;;
    h) echo "syntaxe : loadupdate [-h|--help  /  [-j|--nojo] [-q|-noquestions / -o|--oldquestions] ]"
       echo "  -h ( --help )         : affiche cette aide"
       echo "  -s ( --nosenateurs )  : pas de mise-à-jour de la liste des sénateurs et de leurs commissions"
       echo "  -j ( --nojo )         : pas de mise-à-jour des séances de commission listées au Journal Officiel"
       echo "  -q ( --noquestions )  : pas de mise-à-jour des questions écrites au gouvernement"
       echo "  -o ( --oldquestions ) : mise-à-jour des questions depuis le début de la législature et reload des ppl des 3 derniers mois"
	rm /tmp/loadupdate-ns.lock
       exit 1;;
  esac
done

if [[ $senateurs -eq 1 ]]; then
  echo Mise-à-jour sénateurs
  echo =======================
  bash bin/load_senateurs
fi

# Récupération et création des JSON

if [[ $jo -eq 1 ]]; then
  echo JO
  echo =======================
  cd batch/jo ; bash compute_latest.sh senat ; cd ../..
fi
echo Hemicycles
echo =======================
cd batch/hemicycle ; bash compute_hemicycle.sh ; cd ../..
echo Commissions
echo =======================
cd batch/commission ; bash compute_latest.sh $total ; cd ../..
echo Amendements et Documents
echo =======================
cd batch ; perl download_elements_dossiers.pl $total ; cd ..
echo Parse amendements
echo =======================
cd batch/amendements ; bash compute_latest.sh ; cd ../..
echo Parse documents
echo =======================
cd batch/documents ; bash compute_latest.sh ; cd ../..
if [[ $questions -ne 0 ]]; then
  echo Questions
  echo =======================
  cd batch/questions
  if [[ $questions -eq 1 ]]; then
    bash compute_latest.sh recent
  else
    bash compute_latest.sh all
  fi
  cd ../..
fi

# Vérification des JSON



# Chargement via tasks

if [[ $jo -eq 1 ]]; then
  echo load JO
  echo =======================
  while ! php symfony load:JO ; do
        php symfony cc --env=test  --app=frontend > /dev/null
  done;
fi
echo Load Hemicycles
echo =======================
while ls batch/hemicycle/out | grep [a-z] > /dev/null ; do
	php symfony cc --env=test  --app=frontend > /dev/null
	php symfony load:Hemicycle
done;
echo "Load Commissions : http://www.nossenateurs.fr/backend.php/commissions"
echo =======================
while ls batch/commission/out | grep [a-z] > /dev/null ; do
	php symfony cc --env=test  --app=frontend > /dev/null
	php symfony load:Commission
done;
echo Load Amendements
echo =======================
while ls batch/amendements/json | grep [a-z] > /dev/null ; do
	php symfony cc --env=test  --app=frontend > /dev/null
	php symfony load:Amdmts
done;
if [[ $questions -ne 0 ]]; then
  echo Load Questions
  echo =======================
  while ls batch/questions/json | grep [a-z] > /dev/null ; do
	php symfony cc --env=test  --app=frontend > /dev/null
	php symfony load:Questions
  done;
fi
echo Load Documents
echo =======================
while ls batch/documents/out | grep [a-z] > /dev/null ; do
        php symfony cc --env=test  --app=frontend > /dev/null
        php symfony load:Documents
done;



# Postprocessings

echo Tags séances
echo =======================
bash bin/tag_seance
echo Update sessions
echo =======================
php symfony set:Session
echo Update vacances
echo =======================
php symfony set:Vacances
echo Update tops sénateurs
echo =======================
php symfony top:Senateurs
echo Update hardcache html
echo =======================
bash bin/update_hardcache

rm /tmp/loadupdate-ns.lock
